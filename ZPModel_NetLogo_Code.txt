;;NETLOGO CODE BLOCK
globals [price supply maxprox maxpower center-x center-y]
breed [cits cit]
breed [govts govt]
directed-link-breed [linkcits linkcit]
directed-link-breed [linkstakeholders linkstakeholder]

turtles-own [ideo wealth power stakeholder?]
cits-own [proximity party selectorate? bought? own-pref own-power own-eu temp-eu satisfaction edu edu-scale rawpower minpref turcbo
  sown-pref sown-power sown-eu cbo-pref cbo-power cbo-eu stemp-eu sturcbo? scbo-pref scbo-power scbo-eu]
links-own [    citlink? cbolink? regulatorlink?]

;;linkcits-own [pref1 power1 eu1 pref2 power2 eu2 intereu cbopref cbopower cboeu cboeu1 cboeu2 cboeu12 diffpref1 diffpref2]
linkcits-own [  pref1 power1 eu1 pref2 power2 eu2 intereu cbopref cbopower       cboeu1 cboeu2         diffpref1 diffpref2]

;;linkstakeholders-own [spref1 spower1 seu1 spref2 spower2 seu2 sintereu scbopref scbopower scboeu scboeu1 scboeu2 scboeu12]
linkstakeholders-own   [spref1 spower1 seu1 spref2 spower2 seu2 sintereu scbopref scbopower        scboeu1 scboeu2         ]

to setup
  clear-all

  create-govts 1 [
    set breed govts
    set stakeholder? 1
    set hidden? true]

  create-cits initial-number [
    set color white
    set shape "circle"
    setxy random-xcor random-ycor
    set ideo random-normal cit_ideo_mean cit_ideo_sd
    set own-pref ideo
    set stakeholder? 0
    set party random party-number
    if random 100 <= selectorate-rate [set selectorate? 1]
    set wealth random-normal cit_wealth_mean cit_wealth_sd
    if selectorate? = 1 [set wealth wealth * 1.1]
  ]
  
  ask cits [
    set satisfaction wealth * (wealth / median [wealth] of cits) * (ideo / median [ideo] of cits)
  ]
  
  ask govts [
    set wealth ((sum [wealth] of cits) * tax) + Government-Base-Wealth
  ]
  
  reset-ticks
end

to go
  if ticks >= 24 or count cits with [shape = "exclamation"] > 0 [stop]
  self-update
  cits-talk
  stakeholder-talk
  conflict
  update-plot
  tick
end


to self-update
  set maxprox max [proximity] of cits

  ask cits [
    let ideo-error -0.02 + random-float 0.04
    if selectorate? = 1[set ideo gov-ideo * ideo-error]
    if ideo >= 100 [set ideo 99]
    if ideo <= 1 [set ideo 2]
    set own-pref ideo
    set wealth (wealth * (base + random-float ((1 - base) * 2)) * (1 - tax))
    if selectorate? = 1 [set wealth wealth * 1.1]
    set satisfaction wealth * (wealth / median [wealth] of cits) * (ideo / median [ideo] of cits)
    set rawpower wealth
  ]

  set maxpower max [rawpower] of cits

  ask cits [
    set power rawpower / maxpower
    set own-power power]
  ask govts [
    set wealth ((sum ([wealth] of cits) * tax) + Government-Base-Wealth)
    set power wealth ]
  end

to cits-talk
   ;;block 1
   ask cits [
       create-linkcits-to cits in-radius talkspan with [who != [who] of myself] [
         
         ;;link
         set citlink? ticks
         set hidden? TRUE

         set pref1 [own-pref] of end1
         set power1 [own-power] of end1
         set eu1 [own-eu] of end1

         set pref2 [own-pref] of end2
         set power2 [own-power] of end2
         set eu2 [own-eu] of end2


         set intereu (power1 + power2) * 1.5 * (100 - abs(pref1 - pref2))

         set cboeu1 0.5 * (1.5 * eu1 + intereu)
         set cboeu2 0.5 * (1.5 * eu2 + intereu)

         set cbopref ((pref1 * power1 + pref2 * power2) / (power1 + power2 + 0.0000001))


         set cbopower (power1 + power2) * 1.5
     ;;set cboeu cbopower * (100 - abs (cbopref - cbopref))
     ;;set cboeu12 0.5 * (eu1 + intereu) + 0.5 * (eu2 + intereu)

         set diffpref1 abs(cbopref - pref1)
         set diffpref2 abs(cbopref - pref2)

         ask end1 [
           ifelse empty? [cboeu1] of my-out-links with [citlink? = ticks] [
             set temp-eu 0
           ] [
             set temp-eu max [cboeu1] of my-out-links with [citlink? = ticks]
             set minpref min [diffpref1] of my-out-links with [citlink? = ticks]
           ]
         ]
         ask end2 [
           ifelse empty? [cboeu1] of my-in-links with [citlink? = ticks] [
             set temp-eu 0
           ][
             set temp-eu max [cboeu2] of my-in-links  with [citlink? = ticks]
             set minpref min [diffpref2] of my-in-links with [citlink? = ticks]
           ]
         ]
       ]
   ] ;;END ASK CITS

  ask linkcits with [citlink? = ticks] [
    if cboeu1 < [temp-eu] of end1 [die]
    if cboeu1 < [own-eu] of end1 [die]
    if cboeu2 <= [own-eu] of end2 [die]
    if diffpref2 > [minpref] of end2 [die]
    ifelse ([temp-eu] of end1 > [own-eu] of end1) and ([temp-eu] of end2 > [own-eu] of end2) [
      ask end1 [
        set turcbo 2
        set stakeholder? 1

        set own-pref max [cbopref] of my-out-links with [citlink? = ticks]
        set sown-pref max [cbopref] of my-out-links with [citlink? = ticks]
        set cbo-pref max [cbopref] of my-out-links with [citlink? = ticks]

        set own-power 1.5 * own-power
        set sown-power max [cbopower] of my-out-links with [citlink? = ticks]
        set cbo-power max [cbopower] of my-out-links with [citlink? = ticks]

        set own-eu max [cboeu1] of my-out-links with [citlink? = ticks]
        set sown-eu max [cboeu1] of my-out-links with [citlink? = ticks]
        set cbo-eu max [cboeu1] of my-out-links with [citlink? = ticks]

      ]
      ask end2 [
        set turcbo 2
        set stakeholder? 0

        set own-pref [cbo-pref] of other-end
        set cbo-pref [cbo-pref] of other-end

        set own-power 1.5 * own-power
        set cbo-power 0

        set own-eu max [cboeu2] of my-in-links with [citlink? = ticks]
        set cbo-eu max [cboeu2] of my-in-links with [citlink? = ticks]

      ]

      set hidden? FALSE
    ][ ;ELSE
       ask end1 [
          set turcbo 1
          set own-pref own-pref
          set own-power own-power
       ]
       ask end2 [
          set turcbo 1
          set own-pref own-pref
          set own-power own-power
       ]
       die
    ]
  ]

  ask linkcits with [citlink? < ticks] [
     if [own-pref] of end1 != [own-pref] of end2 [
     set pref1 [own-pref] of end1
     set power1 [own-power] of end1
     set eu1 [own-eu] of end1
     set pref2 [own-pref] of end2
     set power2 [own-power] of end2
     set eu2 [own-eu] of end2
     set intereu (power1 + power2) * 1.5 * (100 - abs(pref1 - pref2))
     set cboeu1 0.5 * (1.5 * eu1 + intereu)
     set cboeu2 0.5 * (1.5 * eu2 + intereu)
     set cbopref ((pref1 * power1 + pref2 * power2)/(power1 + power2 + 0.0000001))
     set cbopower (power1 + power2) * 1.5
     ;;set cboeu cbopower * (100 - abs (cbopref - cbopref))
;;     set cboeu12 0.5 * (eu1 + intereu) + 0.5 * (eu2 + intereu)
    ifelse (cboeu1 < [own-eu] of end1) or (cboeu2 < [own-eu] of end2) [
        ask end1 [
          if count my-out-links with [citlink? = 2] = 0 and count my-in-links with [citlink? = 2] = 0 [
            set turcbo 1
            set cbo-pref 0
            set cbo-power 0
            set stakeholder? 0
            set own-power own-power / 1.5
            set own-eu (100 - abs (own-pref - own-pref)) * own-power
            set shape "circle"
          ]
        ]
        ask end2 [
          if count my-out-links with [citlink? = 2] = 0 and count my-in-links with [citlink? = 2] = 0 [
            set turcbo 1
            set cbo-pref 0
            set cbo-power 0
            set stakeholder? 0
            set own-power own-power / 1.5
            set own-eu (100 - abs (own-pref - own-pref)) * own-power
            set shape "circle"
          ]
        ]
      die
    ][
       ask end1 [
         ifelse count my-out-links with [citlink? = 2] = 0 and count my-in-links with [citlink? = 2] = 0 [
           set turcbo 2
           set stakeholder? 0
           set own-pref [cbo-pref] of other-end
           set cbo-pref [cbo-pref] of other-end
           set cbo-power 0
           set own-eu (100 - abs (own-pref - own-pref)) * own-power
         ] [
           set stakeholder? 1
         ]
       ]
       ask end2 [
          ifelse count my-out-links with [citlink? = 2] = 0 and count my-in-links with [citlink? = 2] = 0 [
            set turcbo 2
            set stakeholder? 0
            set own-pref [cbo-pref] of other-end
            set cbo-pref [cbo-pref] of other-end
            set cbo-power 0
            set own-eu (100 - abs (own-pref - own-pref)) * own-power
          ][
            set stakeholder? 1
          ]
       ]
       set hidden? FALSE
    ]
   ]
   ]
   ask cits with [stakeholder? = 1] [
     set cbo-power (sum [cbopower] of my-out-links with [citlink? > 0]) + (sum [cbopower] of my-in-links with [citlink? > 0]) - own-power * ((count my-out-links with [citlink? > 0]) + (count my-in-links with [citlink? > 0]) - 1)]
end


to stakeholder-talk
  ask cits with [stakeholder? = 1] [
    create-linkstakeholders-to cits with [stakeholder? = 1] with [who != [who] of myself]
    [set cbolink? ticks
     set spref1 [sown-pref] of end1
     set spower1 [sown-power] of end1
     set seu1 [sown-eu] of end1
     set spref2 [sown-pref] of end2
     set spower2 [sown-power] of end2
     set seu2 [sown-eu] of end2
     set scbopref ((spref1 * spower1 + spref2 * spower2)/(spower1 + spower2 + 0.0000001))
     set scbopower spower1 + spower2
     ;;set scboeu scbopower * (100 - abs (scbopref - scbopref))
     set scboeu1 (100 - abs(scbopref - spref1)) * (spower1 + (scbopower - spower1) * (spower1 / (scbopower + 0.000001)))
     set scboeu2 (100 - abs(scbopref - spref2)) * (spower2 + (scbopower - spower2) * (spower2 / (scbopower + 0.000001)))
     ask end1 [ifelse empty? [scboeu1] of my-out-links with [cbolink? = 3]
       [set stemp-eu 0] [set stemp-eu max [scboeu1] of my-out-links with [cbolink? = 3]]]
     ask end2 [ifelse empty? [scboeu1] of my-in-links with [cbolink? = 3]
       [set stemp-eu 0] [set stemp-eu max [scboeu2] of my-in-links with [cbolink? = 3]]]
     set hidden? TRUE]
    ]
  ask linkstakeholders with [cbolink? = ticks] [

    if ([stemp-eu] of end1) + ([stemp-eu] of end2) != (scboeu1 + scboeu2) [die]

    ifelse ([stemp-eu] of end1 > [sown-eu] of end1) and ([stemp-eu] of end2 > [sown-eu] of end2)
    [
      ask end1 [
        set sturcbo? 1
        set sown-pref max [scbopref] of my-out-links with [cbolink? = ticks]
        set own-pref sown-pref
        set scbo-pref max [scbopref] of my-out-links with [cbolink? = ticks]
        set scbo-power max [scbopower] of my-out-links with [cbolink? = ticks]
        set sown-eu max [scboeu1] of my-out-links with [cbolink? = ticks]
        set scbo-eu max [scboeu1] of my-out-links with [cbolink? = ticks]
      ]

      ask end2 [
        set sturcbo? 0
        set sown-pref [scbo-pref] of other-end
        set own-pref sown-pref
        set scbo-pref [scbo-pref] of other-end
        set scbo-power 0
        set sown-eu max [scboeu2] of my-in-links with [cbolink? = ticks]
        set scbo-eu max [scboeu2] of my-in-links with [cbolink? = ticks]
      ]
      set hidden? FALSE
      set color pink
    ][
      ask end1 [
        set sown-pref sown-pref
        set own-pref sown-pref
        set sown-power sown-power
      ]
      ask end2 [
        set sown-pref sown-pref
        set own-pref sown-pref
        set sown-power sown-power
      ]
  ]]
    ask linkstakeholders with [cbolink? < ticks] [
     set spref1 [sown-pref] of end1
     set spower1 [sown-power] of end1
     set seu1 [sown-eu] of end1
     set spref2 [sown-pref] of end2
     set spower2 [sown-power] of end2
     set seu2 [sown-eu] of end2
     set scbopref ((spref1 * spower1 + spref2 * spower2)/(spower1 + spower2 + 0.0000001))
     set scbopower spower1 + spower2
     ;;set scboeu scbopower * (100 - abs (scbopref - scbopref))
     set scboeu1 (100 - abs(scbopref - spref1)) * (spower1 + (scbopower - spower1) * (spower1 / (scbopower + 0.000001)))
     set scboeu2 (100 - abs(scbopref - spref2)) * (spower2 + (scbopower - spower2) * (spower2 / (scbopower + 0.000001)))
    ifelse (scboeu1 < [sown-eu] of end1) or (scboeu2 < [sown-eu] of end2)
    [ask end1 [
        if count my-out-links with [cbolink? = 3] = 0 and count my-in-links with [cbolink? = ticks] = 0 [
        set sturcbo? 0
        set scbo-power 0]]
    ask end2 [
        if count my-out-links with [cbolink? = 3] = 0 and count my-in-links with [cbolink? = ticks] = 0 [
        set sturcbo? 0
        set scbo-power 0]]
      die]
    [if [sown-pref] of end1 != [sown-pref] of end2 [
        ask end1 [
        if count my-out-links with [cbolink? = ticks] = 0 and count my-in-links with [cbolink? = ticks] = 0 [
        set sturcbo? 1
        set sown-pref [scbo-pref] of other-end
        set scbo-pref [scbo-pref] of other-end
        set scbo-power 0
        set sown-eu (100 - abs (sown-pref - sown-pref)) * sown-power]]
    ask end2 [
        if count my-out-links with [cbolink? = ticks] = 0 and count my-in-links with [cbolink? = ticks] = 0 [
        set sturcbo? 1
        set sown-pref [scbo-pref] of other-end
        set scbo-pref [scbo-pref] of other-end
        set scbo-power 0
        set sown-eu (100 - abs (sown-pref - sown-pref)) * sown-power]]]
    ]
    ]
   ask cits with [stakeholder? = 1] [
     set scbo-power (sum [scbopower] of my-out-links with [cbolink? > 0]) + (sum [scbopower] of my-in-links with [cbolink? > 0]) - sown-power * ((count my-out-links with [cbolink? > 0]) + (count my-in-links with [cbolink? > 0]) - 1)]
   ask cits with [stakeholder? = 1] [if (count my-out-links with [cbolink? >= 1] = 0) and (count my-in-links with [cbolink? >= 1] = 0)
    [set sturcbo? 0
     set scbo-power 0]]
end

to conflict
  ask cits with [sturcbo? = 1] [
    if scbo-power >= sum [own-power] of cits with [sturcbo? != 1] * power-parity and abs (scbo-pref - gov-ideo) > threshold
    [set shape "exclamation"
      set size 5
     set color red]]
end

to update-plot
end
